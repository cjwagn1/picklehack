{"version":3,"sources":["components/Timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StartButton","styled","img","SpamButton","ResetButton","Countdown","div","timer_var","timex","useState","started","setStarted","seconds","setSeconds","time_out","setTime_out","counter","setCounter","over","src","onClick","clearInterval","spam","begin","setInterval","Count","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"omBAGA,IAAMA,EAAkCC,IAAOC,IAAV,KAI/BC,EAAiCF,IAAOC,IAAV,KAI9BE,EAAkCH,IAAOC,IAAV,KAI/BG,EAAgCJ,IAAOK,IAAV,KAKpB,aACd,IACIC,EACAC,EAFiB,GADD,EAIUC,oBAAS,GAJnB,mBAIbC,EAJa,KAIJC,EAJI,OAKUF,mBAJT,IADD,mBAKbG,EALa,KAKJC,EALI,OAMYJ,oBAAS,GANrB,mBAMbK,EANa,KAMHC,EANG,OAOUN,mBAAS,GAPnB,mBAObO,EAPa,KAOJC,EAPI,KAQdC,EACL,6BACC,kBAACd,EAAD,CACCe,IAAI,kHACJC,QA+BH,WACCC,cAAcd,GACdM,EA5CoB,IA6CpBL,EA7CoB,GA8CpBS,EAAW,GACXN,GAAW,GACXI,GAAY,MAnCX,kBAACV,EAAD,oCAAwCW,IAGpCM,EACL,6BACC,kBAACnB,EAAD,CACCgB,IAAI,6FACJC,QAiBH,WACCH,EAAWD,EAAU,MAhBpB,kBAACX,EAAD,KAAYO,IAGRW,EACL,kBAACvB,EAAD,CACCmB,IAAI,6FACJC,QAIF,WACCT,GAAW,GACXJ,EAAYiB,YAAYC,EAAO,QAiBhC,SAASA,IACRZ,GAAW,SAACD,GAAD,OAAaA,EAAU,KAEpB,KADdJ,GAAgB,KAEfa,cAAcd,GACdI,GAAW,GACXI,GAAY,GACZP,EA1DmB,IA8DrB,OAAO,6BAAMM,EAAWI,EAAOR,EAAUY,EAAOC,I,sFC9EbtB,IAAOK,IAAV,KAAjC,IAIe,aACd,OAAO,kBAAC,EAAD,OCEYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDiInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e20f07d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\n\r\nconst StartButton: AnyStyledComponent = styled.img`\r\n\tcursor: pointer;\r\n`;\r\n\r\nconst SpamButton: AnyStyledComponent = styled.img`\r\n\tcursor: pointer;\r\n`;\r\n\r\nconst ResetButton: AnyStyledComponent = styled.img`\r\n\tcursor: pointer;\r\n`;\r\n\r\nconst Countdown: AnyStyledComponent = styled.div`\r\n\tcolor: red;\r\n\tfont-size: 200px;\r\n`;\r\n\r\nexport default () => {\r\n\tconst TIMER_LENGTH = 10;\r\n\tlet timer_var: any;\r\n\tlet timex = TIMER_LENGTH;\r\n\tconst [started, setStarted] = useState(false);\r\n\tconst [seconds, setSeconds] = useState(TIMER_LENGTH);\r\n\tconst [time_out, setTime_out] = useState(false);\r\n\tconst [counter, setCounter] = useState(0);\r\n\tconst over = (\r\n\t\t<div>\r\n\t\t\t<ResetButton\r\n\t\t\t\tsrc=\"https://media.discordapp.net/attachments/775466871058464799/777009577874685952/unknown.png?width=340&height=671\"\r\n\t\t\t\tonClick={Reset}\r\n\t\t\t/>\r\n\t\t\t<Countdown>Game Over!, your score was: {counter}</Countdown>\r\n\t\t</div>\r\n\t);\r\n\tconst spam = (\r\n\t\t<div>\r\n\t\t\t<SpamButton\r\n\t\t\t\tsrc=\"https://media.discordapp.net/attachments/775466871058464799/776985933274152990/unknown.png\"\r\n\t\t\t\tonClick={SpamClick}\r\n\t\t\t/>\r\n\t\t\t<Countdown>{seconds}</Countdown>\r\n\t\t</div>\r\n\t);\r\n\tconst begin = (\r\n\t\t<StartButton\r\n\t\t\tsrc=\"https://media.discordapp.net/attachments/775466871058464799/777019881366224946/unknown.png\"\r\n\t\t\tonClick={Start}\r\n\t\t/>\r\n\t);\r\n\r\n\tfunction Start() {\r\n\t\tsetStarted(true);\r\n\t\ttimer_var = setInterval(Count, 1000);\r\n\t}\r\n\r\n\tfunction SpamClick() {\r\n\t\tsetCounter(counter + 1);\r\n\t\t//alert(counter);\r\n\t}\r\n\r\n\tfunction Reset() {\r\n\t\tclearInterval(timer_var);\r\n\t\tsetSeconds(TIMER_LENGTH);\r\n\t\ttimex = TIMER_LENGTH;\r\n\t\tsetCounter(0);\r\n\t\tsetStarted(false);\r\n\t\tsetTime_out(false);\r\n\t}\r\n\r\n\tfunction Count() {\r\n\t\tsetSeconds((seconds) => seconds - 1);\r\n\t\ttimex = timex - 1;\r\n\t\tif (timex === 0) {\r\n\t\t\tclearInterval(timer_var);\r\n\t\t\tsetStarted(false);\r\n\t\t\tsetTime_out(true);\r\n\t\t\ttimex = TIMER_LENGTH;\r\n\t\t}\r\n\t}\r\n\r\n\treturn <div>{time_out ? over : started ? spam : begin}</div>;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\nimport Test from \"./components/Timer\";\r\n\r\nconst Example: AnyStyledComponent = styled.div`\r\n\tcolor: red;\r\n`;\r\n\r\nexport default () => {\r\n\treturn <Test></Test>;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}