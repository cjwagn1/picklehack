{"version":3,"sources":["utils/firebase.ts","components/dataCollection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Overview","styled","div","db","collection","meow","useState","name","setName","score","setScore","get","then","querySnapshot","data2","docs","map","doc","data","i","length","push","console","log","onSubmit","e","preventDefault","add","type","placeholder","onChange","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wPAcAA,IAASC,cAXM,CACdC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMT,IAAMC,EAAYV,IAASU,YACnBV,EAAf,E,sFCdA,IAAMW,EAA+BC,IAAOC,IAAV,KAInB,aACd,IAAMC,EAAKJ,EAAUK,WAAW,QAG1BC,GAFSN,EAAUK,WAAW,QAElB,IAJE,EAMIE,mBAAS,IANb,mBAMbC,EANa,KAMPC,EANO,OAOMF,mBAAS,GAPf,mBAObG,EAPa,KAONC,EAPM,OAQIJ,qBARJ,6BAuCpB,OAbAP,EACEK,WAAW,QACXO,MACAC,MAAK,SAACC,GAEN,IADA,IAAMC,EAAQD,EAAcE,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,UACzCC,EAAI,EAAGA,EAAIL,EAAMM,OAAQD,IACjCd,EAAKgB,KAAKP,EAAMK,OAInBG,QAAQC,IAAI,eAAgBlB,GAC5BiB,QAAQC,IAAIlB,EAAK,IAGhB,6BACC,kBAACL,EAAD,KACC,0BAAMwB,SAzBT,SAAsBC,GACrBA,EAAEC,iBACFvB,EAAGwB,IAAI,CACNpB,KAAMA,EACNE,MAAOA,IAERC,EAAS,KAoBN,2BACCkB,KAAK,OACLC,YAAY,aACZtB,KAAK,OACLuB,SArCL,SAAoBL,GACnBjB,EAAQiB,EAAEM,OAAOC,QAqCbA,MAAOzB,IAER,2BACCqB,KAAK,SACLC,YAAY,cACZtB,KAAK,QACLuB,SAzCL,SAAqBL,GACpBf,EAASe,EAAEM,OAAOC,QAyCdA,MAAOvB,IAER,4BAAQmB,KAAK,UAAb,WAGD,2BAAIvB,EAAK,O,sFC/DuBJ,IAAOC,IAAV,KAAjC,IAIe,aACd,OAAO,kBAAC,EAAD,OCEY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDiInB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.318cf95a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\"\r\n\r\nconst config = {\r\n\tapiKey: \"AIzaSyA6oJvGdUUKiacQgyqCuDHqXfiYTAFBKYk\",\r\n\tauthDomain: \"picklehack-a4031.firebaseapp.com\",\r\n\tdatabaseURL: \"https://picklehack-a4031.firebaseio.com\",\r\n\tprojectId: \"picklehack-a4031\",\r\n\tstorageBucket: \"picklehack-a4031.appspot.com\",\r\n\tmessagingSenderId: \"982436136572\",\r\n\tappId: \"1:982436136572:web:d8b14e3409439eec9e2bf9\",\r\n\tmeasurementId: \"G-8037CX1LDS\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n\r\nexport const firestore = firebase.firestore()\r\nexport default firebase","import React, { useState, useEffect } from \"react\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\nimport { firestore } from \"../utils/firebase\";\r\n\r\nconst Overview: AnyStyledComponent = styled.div`\r\n\tcolor: red;\r\n`;\r\n\r\nexport default () => {\r\n\tconst db = firestore.collection(\"test\");\r\n\tconst dbTest = firestore.collection(\"test\");\r\n\r\n\tconst meow: any = [];\r\n\r\n\tconst [name, setName] = useState(\"\");\r\n\tconst [score, setScore] = useState(0);\r\n\tconst [data, setData] = useState();\r\n\r\n\tfunction updateName(e: any) {\r\n\t\tsetName(e.target.value);\r\n\t}\r\n\tfunction updateScore(e: any) {\r\n\t\tsetScore(e.target.value);\r\n\t}\r\n\r\n\tfunction firebaseData(e: any) {\r\n\t\te.preventDefault();\r\n\t\tdb.add({\r\n\t\t\tname: name,\r\n\t\t\tscore: score,\r\n\t\t});\r\n\t\tsetScore(0);\r\n\t}\r\n\r\n\tfirestore\r\n\t\t.collection(\"test\")\r\n\t\t.get()\r\n\t\t.then((querySnapshot) => {\r\n\t\t\tconst data2 = querySnapshot.docs.map((doc) => doc.data());\r\n\t\t\tfor (let i = 0; i < data2.length; i++) {\r\n\t\t\t\tmeow.push(data2[i]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\tconsole.log(\"this is meow\", meow);\r\n\tconsole.log(meow[2]);\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Overview>\r\n\t\t\t\t<form onSubmit={firebaseData}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Enter name\"\r\n\t\t\t\t\t\tname=\"name\"\r\n\t\t\t\t\t\tonChange={updateName}\r\n\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"number\"\r\n\t\t\t\t\t\tplaceholder=\"Enter score\"\r\n\t\t\t\t\t\tname=\"score\"\r\n\t\t\t\t\t\tonChange={updateScore}\r\n\t\t\t\t\t\tvalue={score}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<button type=\"submit\">Submit</button>\r\n\t\t\t\t</form>\r\n\r\n\t\t\t\t<p>{meow[0]}</p>\r\n\t\t\t</Overview>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport styled, { AnyStyledComponent } from \"styled-components\";\r\nimport Test from \"./components/dataCollection\";\r\n\r\nconst Example: AnyStyledComponent = styled.div`\r\n\tcolor: red;\r\n`;\r\n\r\nexport default () => {\r\n\treturn <Test></Test>;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}